{
  "version": 3,
  "sources": ["../../src/lib/tools.ts"],
  "sourcesContent": ["import got from \"got\";\r\n\r\n/**\r\n * Tests whether the given variable is a real object and not an Array\r\n * @param it The variable to test\r\n */\r\nexport function isObject(it: unknown): it is Record<string, any> {\r\n    // This is necessary because:\r\n    // typeof null === 'object'\r\n    // typeof [] === 'object'\r\n    // [] instanceof Object === true\r\n    return Object.prototype.toString.call(it) === \"[object Object]\";\r\n}\r\n\r\n/**\r\n * Tests whether the given variable is really an Array\r\n * @param it The variable to test\r\n */\r\nexport function isArray(it: unknown): it is any[] {\r\n    if (Array.isArray != null) return Array.isArray(it);\r\n    return Object.prototype.toString.call(it) === \"[object Array]\";\r\n}\r\n\r\n/**\r\n * Translates text using the Google Translate API\r\n * @param text The text to translate\r\n * @param targetLang The target languate\r\n * @param yandexApiKey The yandex API key. You can create one for free at https://translate.yandex.com/developers\r\n */\r\nexport async function translateText(text: string, targetLang: string, yandexApiKey?: string): Promise<string> {\r\n    if (targetLang === \"en\") {\r\n        return text;\r\n    } else if (!text) {\r\n        return \"\";\r\n    }\r\n    if (yandexApiKey) {\r\n        return translateYandex(text, targetLang, yandexApiKey);\r\n    } else {\r\n        return translateGoogle(text, targetLang);\r\n    }\r\n}\r\n\r\n/**\r\n * Translates text with Yandex API\r\n * @param text The text to translate\r\n * @param targetLang The target languate\r\n * @param apiKey The yandex API key. You can create one for free at https://translate.yandex.com/developers\r\n */\r\nasync function translateYandex(text: string, targetLang: string, apiKey: string): Promise<string> {\r\n    if (targetLang === \"zh-cn\") {\r\n        targetLang = \"zh\";\r\n    }\r\n    try {\r\n        const url = `https://translate.yandex.net/api/v1.5/tr.json/translate?key=${apiKey}&text=${encodeURIComponent(text)}&lang=en-${targetLang}`;\r\n        const response = await got({url, timeout: 15000});\r\n        if (isArray((response.body as any)?.text)) {\r\n            return (response.body as any).text[0];\r\n        }\r\n        throw new Error(\"Invalid response for translate request\");\r\n    } catch (e) {\r\n        throw new Error(`Could not translate to \"${targetLang}\": ${e}`);\r\n    }\r\n}\r\n\r\n/**\r\n * Translates text with Google API\r\n * @param text The text to translate\r\n * @param targetLang The target languate\r\n */\r\nasync function translateGoogle(text: string, targetLang: string): Promise<string> {\r\n    try {\r\n        const url = `http://translate.googleapis.com/translate_a/single?client=gtx&sl=en&tl=${targetLang}&dt=t&q=${encodeURIComponent(text)}&ie=UTF-8&oe=UTF-8`;\r\n        const response = await got({url, timeout: 15000});\r\n        if (isArray(response.body)) {\r\n            // we got a valid response\r\n            return response.body[0][0][0];\r\n        }\r\n        throw new Error(\"Invalid response for translate request\");\r\n    } catch (e: any) {\r\n        if (e.response?.status === 429) {\r\n            throw new Error(\r\n                `Could not translate to \"${targetLang}\": Rate-limited by Google Translate`\r\n            );\r\n        } else {\r\n            throw new Error(`Could not translate to \"${targetLang}\": ${e}`);\r\n        }\r\n    }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAgB;AAMT,SAAS,SAAS,IAAwC;AAK7D,SAAO,OAAO,UAAU,SAAS,KAAK,EAAE,MAAM;AAClD;AAMO,SAAS,QAAQ,IAA0B;AAC9C,MAAI,MAAM,WAAW;AAAM,WAAO,MAAM,QAAQ,EAAE;AAClD,SAAO,OAAO,UAAU,SAAS,KAAK,EAAE,MAAM;AAClD;AAQA,eAAsB,cAAc,MAAc,YAAoB,cAAwC;AAC1G,MAAI,eAAe,MAAM;AACrB,WAAO;AAAA,EACX,WAAW,CAAC,MAAM;AACd,WAAO;AAAA,EACX;AACA,MAAI,cAAc;AACd,WAAO,gBAAgB,MAAM,YAAY,YAAY;AAAA,EACzD,OAAO;AACH,WAAO,gBAAgB,MAAM,UAAU;AAAA,EAC3C;AACJ;AAQA,eAAe,gBAAgB,MAAc,YAAoB,QAAiC;AAhDlG;AAiDI,MAAI,eAAe,SAAS;AACxB,iBAAa;AAAA,EACjB;AACA,MAAI;AACA,UAAM,MAAM,+DAA+D,eAAe,mBAAmB,IAAI,aAAa;AAC9H,UAAM,WAAW,UAAM,WAAAA,SAAI,EAAC,KAAK,SAAS,KAAK,CAAC;AAChD,QAAI,SAAS,cAAS,SAAT,mBAAuB,IAAI,GAAG;AACvC,aAAQ,SAAS,KAAa,KAAK;AAAA,IACvC;AACA,UAAM,IAAI,MAAM,wCAAwC;AAAA,EAC5D,SAAS,GAAP;AACE,UAAM,IAAI,MAAM,2BAA2B,gBAAgB,GAAG;AAAA,EAClE;AACJ;AAOA,eAAe,gBAAgB,MAAc,YAAqC;AArElF;AAsEI,MAAI;AACA,UAAM,MAAM,0EAA0E,qBAAqB,mBAAmB,IAAI;AAClI,UAAM,WAAW,UAAM,WAAAA,SAAI,EAAC,KAAK,SAAS,KAAK,CAAC;AAChD,QAAI,QAAQ,SAAS,IAAI,GAAG;AAExB,aAAO,SAAS,KAAK,GAAG,GAAG;AAAA,IAC/B;AACA,UAAM,IAAI,MAAM,wCAAwC;AAAA,EAC5D,SAAS,GAAP;AACE,UAAI,OAAE,aAAF,mBAAY,YAAW,KAAK;AAC5B,YAAM,IAAI;AAAA,QACN,2BAA2B;AAAA,MAC/B;AAAA,IACJ,OAAO;AACH,YAAM,IAAI,MAAM,2BAA2B,gBAAgB,GAAG;AAAA,IAClE;AAAA,EACJ;AACJ;",
  "names": ["got"]
}
