{
  "version": 3,
  "sources": ["../../src/lib/log.ts"],
  "sourcesContent": ["import { Logger } from \"ts-log\";\r\n\r\nexport class ioBrokerLogger implements Logger {\r\n\r\n    private readonly log: ioBroker.Logger;\r\n\r\n    public constructor(log: ioBroker.Logger) {\r\n        this.log = log;\r\n    }\r\n\r\n    private _getStack(): any {\r\n        const _prepareStackTrace = Error.prepareStackTrace;\r\n        Error.prepareStackTrace = (_, stack) => stack;\r\n        const stack = new Error().stack?.slice(3);\r\n        Error.prepareStackTrace = _prepareStackTrace;\r\n        return stack;\r\n    }\r\n\r\n    private _getMessage(message?: string, hideTag = false, optionalParams?: any[]): string {\r\n        const msg = message ? message : \"\";\r\n        const stack = this._getStack();\r\n        const typeName = stack[0].getTypeName() !== null ? stack[0].getTypeName() : \"\";\r\n        const functionName = stack[0].getFunctionName() !== null ? `${stack[0].getFunctionName()}` : \"\";\r\n        let tag = \"\";\r\n        if (typeName !== \"\" && !hideTag) {\r\n            tag = `[${typeName}`;\r\n            if (functionName !== \"\") {\r\n                tag = `${tag}.${functionName}] `;\r\n            } else {\r\n                tag = `${tag}] `;\r\n            }\r\n        }\r\n\r\n        if (optionalParams && optionalParams.length > 0) {\r\n            return `${tag}${msg} ${JSON.stringify(optionalParams)}`;\r\n        }\r\n        return `${tag}${msg}`;\r\n    }\r\n\r\n    public trace(message?: string, ...optionalParams: any[]): void {\r\n        this.log.silly(this._getMessage(message, false, optionalParams));\r\n    }\r\n\r\n    public debug(message?: string, ...optionalParams: any[]): void {\r\n        this.log.debug(this._getMessage(message, false, optionalParams));\r\n    }\r\n\r\n    public info(message?: string, ...optionalParams: any[]): void {\r\n        this.log.info(this._getMessage(message, true, optionalParams));\r\n    }\r\n\r\n    public warn(message?: string, ...optionalParams: any[]): void {\r\n        this.log.warn(this._getMessage(message, true, optionalParams));\r\n    }\r\n\r\n    public error(message?: string, ...optionalParams: any[]): void {\r\n        this.log.error(this._getMessage(message, true, optionalParams));\r\n    }\r\n\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEO,MAAM,eAAiC;AAAA,EAInC,YAAY,KAAsB;AACrC,SAAK,MAAM;AAAA,EACf;AAAA,EAEQ,YAAiB;AAV7B;AAWQ,UAAM,qBAAqB,MAAM;AACjC,UAAM,oBAAoB,CAAC,GAAGA,WAAUA;AACxC,UAAM,SAAQ,SAAI,MAAM,EAAE,UAAZ,mBAAmB,MAAM;AACvC,UAAM,oBAAoB;AAC1B,WAAO;AAAA,EACX;AAAA,EAEQ,YAAY,SAAkB,UAAU,OAAO,gBAAgC;AACnF,UAAM,MAAM,UAAU,UAAU;AAChC,UAAM,QAAQ,KAAK,UAAU;AAC7B,UAAM,WAAW,MAAM,GAAG,YAAY,MAAM,OAAO,MAAM,GAAG,YAAY,IAAI;AAC5E,UAAM,eAAe,MAAM,GAAG,gBAAgB,MAAM,OAAO,GAAG,MAAM,GAAG,gBAAgB,MAAM;AAC7F,QAAI,MAAM;AACV,QAAI,aAAa,MAAM,CAAC,SAAS;AAC7B,YAAM,IAAI;AACV,UAAI,iBAAiB,IAAI;AACrB,cAAM,GAAG,OAAO;AAAA,MACpB,OAAO;AACH,cAAM,GAAG;AAAA,MACb;AAAA,IACJ;AAEA,QAAI,kBAAkB,eAAe,SAAS,GAAG;AAC7C,aAAO,GAAG,MAAM,OAAO,KAAK,UAAU,cAAc;AAAA,IACxD;AACA,WAAO,GAAG,MAAM;AAAA,EACpB;AAAA,EAEO,MAAM,YAAqB,gBAA6B;AAC3D,SAAK,IAAI,MAAM,KAAK,YAAY,SAAS,OAAO,cAAc,CAAC;AAAA,EACnE;AAAA,EAEO,MAAM,YAAqB,gBAA6B;AAC3D,SAAK,IAAI,MAAM,KAAK,YAAY,SAAS,OAAO,cAAc,CAAC;AAAA,EACnE;AAAA,EAEO,KAAK,YAAqB,gBAA6B;AAC1D,SAAK,IAAI,KAAK,KAAK,YAAY,SAAS,MAAM,cAAc,CAAC;AAAA,EACjE;AAAA,EAEO,KAAK,YAAqB,gBAA6B;AAC1D,SAAK,IAAI,KAAK,KAAK,YAAY,SAAS,MAAM,cAAc,CAAC;AAAA,EACjE;AAAA,EAEO,MAAM,YAAqB,gBAA6B;AAC3D,SAAK,IAAI,MAAM,KAAK,YAAY,SAAS,MAAM,cAAc,CAAC;AAAA,EAClE;AAEJ;",
  "names": ["stack"]
}
