import { AxiosResponse, Method } from "axios";
import { TypedEmitter } from "tiny-typed-emitter";
import { Logger } from "ts-log";
import { TrustDevice, Cipher } from "./models";
import { HTTPApiEvents, Ciphers, FullDevices, Hubs, Voices } from "./interfaces";
import { AuthResult, VerfyCodeTypes } from "./types";
export declare class HTTPApi extends TypedEmitter<HTTPApiEvents> {
    private api_base;
    private username;
    private password;
    private token;
    private token_expiration;
    private trusted_token_expiration;
    private log;
    private devices;
    private hubs;
    private headers;
    constructor(username: string, password: string, log?: Logger);
    private invalidateToken;
    setPhoneModel(model: string): void;
    getPhoneModel(): string;
    setCountry(country: string): void;
    getCountry(): string;
    setLanguage(language: string): void;
    getLanguage(): string;
    authenticate(): Promise<AuthResult>;
    sendVerifyCode(type?: VerfyCodeTypes): Promise<boolean>;
    listTrustDevice(): Promise<Array<TrustDevice>>;
    addTrustDevice(verify_code: number): Promise<boolean>;
    updateDeviceInfo(): Promise<void>;
    request(method: Method, endpoint: string, data?: any, headers?: any): Promise<AxiosResponse<any>>;
    checkPushToken(): Promise<boolean>;
    registerPushToken(token: string): Promise<boolean>;
    setParameters(station_sn: string, device_sn: string, params: {
        param_type: number;
        param_value: any;
    }[]): Promise<boolean>;
    getCiphers(cipher_ids: Array<number>, user_id: string): Promise<Ciphers>;
    getVoices(device_sn: string): Promise<Voices>;
    getCipher(cipher_id: number, user_id: string): Promise<Cipher>;
    getLog(): Logger;
    getDevices(): FullDevices;
    getHubs(): Hubs;
    getToken(): string | null;
    getTokenExpiration(): Date | null;
    getTrustedTokenExpiration(): Date;
    setToken(token: string): void;
    setTokenExpiration(token_expiration: Date): void;
    getAPIBase(): string;
    setAPIBase(api_base: string): void;
    setOpenUDID(openudid: string): void;
    setSerialNumber(serialnumber: string): void;
}
