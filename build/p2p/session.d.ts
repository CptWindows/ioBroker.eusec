import { TypedEmitter } from "tiny-typed-emitter";
import NodeRSA from "node-rsa";
import { Logger } from "ts-log";
import { CommandType, P2PDataType } from "./types";
import { P2PClientProtocolEvents } from "./interfaces";
export declare class P2PClientProtocol extends TypedEmitter<P2PClientProtocolEvents> {
    private readonly MAX_RETRIES;
    private readonly MAX_COMMAND_RESULT_WAIT;
    private readonly MAX_AKNOWLEDGE_TIMEOUT;
    private readonly MAX_LOOKUP_TIMEOUT;
    private readonly MAX_EXPECTED_SEQNO_WAIT;
    private readonly HEARTBEAT_INTERVAL;
    private readonly MAX_PAYLOAD_BYTES;
    private readonly MAX_PACKET_BYTES;
    private socket;
    private binded;
    private connected;
    private seqNumber;
    private expectedSeqNo;
    private currentMessageBuilder;
    private currentMessageState;
    private downloadTotalBytes;
    private downloadReceivedBytes;
    private cloud_addresses;
    private message_states;
    private address_lookups;
    private connectTimeout?;
    private lookupTimeout?;
    private heartbeatTimeout?;
    private connectTime;
    private lastPong;
    private addresses;
    private current_address;
    private p2p_did;
    private dsk_key;
    private log;
    constructor(p2p_did: string, dsk_key: string, log?: Logger);
    private _initialize;
    private initializeMessageBuilder;
    private initializeMessageState;
    private _clearHeartbeat;
    private _disconnected;
    lookup(): void;
    private lookupByAddress;
    isConnected(): boolean;
    private _connect;
    connect(): Promise<void>;
    private sendCamCheck;
    sendPing(): void;
    sendCommandWithIntString(commandType: CommandType, value: number, valueSub?: number, strValue?: string, strValueSub?: string, channel?: number): void;
    sendCommandWithInt(commandType: CommandType, value: number, strValue?: string, channel?: number): void;
    sendCommandWithStringPayload(commandType: CommandType, value: string, channel?: number): void;
    sendCommandWithString(commandType: CommandType, strValue: string, strValueSub: string, channel?: number): void;
    private sendCommand;
    private _sendCommand;
    private handleMsg;
    private parseDataMessage;
    private handleData;
    private handleDataBinaryAndVideo;
    private handleDataControl;
    private sendAck;
    private getDataType;
    close(): Promise<void>;
    private getHeartbeatInterval;
    private onClose;
    private onError;
    private scheduleHeartbeat;
    setDownloadRSAPrivateKeyPem(pem: string): void;
    getRSAPrivateKey(): NodeRSA | null;
    private initializeStream;
    private endStream;
    private emitStreamStartEvent;
    private emitStreamStopEvent;
    isStreaming(channel: number, datatype: P2PDataType): boolean;
    isLiveStreaming(channel: number): boolean;
}
